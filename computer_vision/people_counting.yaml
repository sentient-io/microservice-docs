openapi: 3.0.1
info:
  title: People Counting
  description: |+
    This Computer Vision microservice tracks and counts people appearing in the input video.</br>
    This microservice returns the number of people detected in that video, the likelihood of overestimation/underestimation, the first appearance, the duration and confidence of each person detected. </br>
    The size of your image file **should not exceed 10 MB**, and the image dimension **should be at least 416x416 pixels**.
  x-additionalinfo: |+
    Suggested Use Cases:
    - Improve visitor experience and optimize operations in retail, leisure, and other sectors - build services to count visitor traffic in venues, measure detailed movements and interactions, and visualize that data to better understand what is happening in within a certain spaces. For example, one can optimize traffic, staff and marketing strategies to increase conversion rates and profits with actionable data. Businesses can use visitor count as a benchmark to figure out the conversion rate for a certain spot to see the real performance. Efficiently allocating the number of staff according to hourly visitor traffic will also create value in terms of revenue, profit and efficiency.
  version: '1.0.1'
  x-subscribelink: people_counting
  x-apitype: small file
  x-apitypedescription: |+
    Fast | Single-Call | 10 MB/Call
  x-inputfilelimit: |+
    Process up to 10 MB of data per API call.
  x-responsetime: |+
    Response rate is fast due to small data transfer per call made.
  x-billingmethod: |+
    The API is billed by per request.
  x-notes: |+
    File size cannot exceed 10 MB.
  x-apidetailsdesc: |+
    Track and counts people appearing in video.
servers:
  - url: 'https://apisa.sentient.io'
tags:
- name: "v1.0.1"
  description: "Published Date - Sep 09, 2021"
paths:
  /microservices/cv/peoplecounting/v1/getpredictions:
    post:
      tags:
        - v1.0.1

      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
              example: {"results": {"counter": 11, "likelihood of overestimation": 0.76,"likelihood of underestimation": 0.39,"people": [{"assigning confidence": 1,"bounding boxes": {"frame": {"294": {"bottom": 420,"left": 249,"right": 417,"top": 207},"300": {"bottom": 420,"left": 249,"right": 417,"top": 207}}},"detection confidence": 0.76,"duration appeared": 0.20689655172413793,"first appearance": 10.137931034482758,"person id": "011"}]},"message": "Successfully Processed","status": "Success"}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentrequired'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notfound'
        '419':
          description: Input Field Missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputfieldmissing'
        '413':
          description: Payload Too Large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputlimitexceeded'  
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidinput'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servererror'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gatewaytimeout'
      security:
        - APIAuthorizer: []
      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/input'
        required: true


components:
  schemas:
    success:
      type: object
      properties: 
        results:
          type: object
          description: The result of the API call.
          example: { "<Json": "Object>" }
          properties:
            counter:
              type: integer
              format: int32
              example: 11
              description: Number of people detected in video
            likelihood of overestimation:
              type: number
              format: float
              example: 0.76
              description:  How likely would there be ID spikes causing counter to increase People
            likelihood of underestimation:
              type: number
              format: float
              example: 0.39
              description:  How likely the model might miss out detecting people in the video
            people:
              type: array
              example: [{'person id': "001",'first appearance': 1.28, 'duration appeared': 7.66, 'detection confidence': 0.77, 'assigning confidence': 1,"bounding boxes": {"frame": {"294": {"bottom": 420,"left": 249,"right": 417,"top": 207},"300": {"bottom": 420,"left": 249,"right": 417,"top": 207}}}}]
              description: Contains a list of individual Persons and their metadata.
              items:
                oneOf:
                - type: object
                  example: {'person id': "001",'first appearance': 1.28, 'duration appeared': 7.66, 'detection confidence': 0.77, 'assigning confidence': 1,"bounding boxes": {"frame": {"294": {"bottom": 420,"left": 249,"right": 417,"top": 207},"300": {"bottom": 420,"left": 249,"right": 417,"top": 207}}}}
    unauthorized:
      type: object
      properties:
        message:
          type: string
          example: Missing Authentication Token
        status:
          type: string
          example: Failure
    restricted:
      type: object
      properties:
        message:
          type: string
          example: The content is restricted
        status:
          type: string
          example: Failure
    forbidden:
      type: object
      properties:
        message:
          type: string
          example: Access Denied Unauthorized User
        status:
          type: string
          example: Failure
    paymentrequired:
      type: object
      properties:
        message:
          type: string
          example: Insufficient Credits Kindly Top Up
        status:
          type: string
          example: Failure
    invalidinput:
      type: object
      properties:
        message:
          type: string
          example: Invalid Input
        status:
          type: string
          example: Failure
    notfound:
      type: object
      properties:
        message:
          type: string
          example: Invalid Request
        status:
          type: string
          example: Failure
    servererror:
      type: object
      properties:
        message:
          type: string
          example: Internal Server Error
        status:
          type: string
          example: Failure
    gatewaytimeout:
      type: object
      properties:
        message:
          type: string
          example: Request Timeout
        status:
          type: string
          example: Failure
    inputfieldmissing:
      type: object
      properties:
        message:
          type: string
          example: Input Field Missing
        status:
          type: string
          example: Failure
    inputlimitexceeded:
      type: object
      properties:
        message:
          type: string
          example: Input Limit Exceeded
        status:
          type: string
          example: Failure
    versions:
      type: object
      properties: 
        v1.0.1:
          type: array
          items:
            oneOf:
            - type: string
              example: Published Date - Sep 09, 2021
              x-details: Bug Fix - Frame Reading
              description: Latest Version
        v1.0.0:
          type: array
          items:
            oneOf:
            - type: string
              example: Published Date - Jan 25, 2021
              x-details: Standardizing Output JSON
              description: Depreciating on Sep 08, 2021
        v0.1.0:
          type: array
          items:
            oneOf:
            - type: string
              example: Published Date - Jul 30, 2020
              x-details: Initial version release
              description: Archived
    input:
      type: object
      required:
        - video_base64
      properties:
        video_base64:
          x-name: video_base64
          type: string
          default: true
          example: UklGRkbiBABXQVZFZm10IBAAAAABA...
          description: |+
            Input video file in base64 format.
            
            Supported formats: acm, anm, apc, au, avi, bfi, bmp_pipe, bmv, codec2, dsf, dss, dvd, fifo, genh, gif, gxf, hls, iff, ifv, ipod, jpeg_pipe, jv, m4v, mjpeg, mlp, mlv, mov, mp2, mp3, mp4, pbm_pipe, pmp, png_pipe, psd_pipe, psp, rawvideo, sdp, sds, sdx, tmv, uncodedframecrc, vcd, vidc, vmd, voc, vpk, wav, webm, wsd, wsvqa, wtv, xmv, xpm_pipe.
        
  securitySchemes:
    APIAuthorizer:
      type: apiKey
      name: x-api-key
      in: header
      x-amazon-apigateway-authtype: custom
      description: Authentication is done using the x-api-key in the request header
