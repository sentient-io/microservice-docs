openapi: 3.0.1
info:
  title: Masked Face Recognition
  description: |+
    This microservice is used to recognise faces of identities behind a mask. The model has been trained on Singapore Politicians Data.</br>
    The size of your image file should **not exceed 5 MB**. Minimum image resolution for a perfect face detectiona and recognition should be 250X250 pixels.</br>
    The model works well for frontal masked faces.
  version: v0.1.0
  x-additionalinfo: |+
    Supported File Formats
    - .blp
    - .bmp
    - .bufr
    - .cur
    - .dcx 
    - .dds 
    - .dib 
    - .eps 
    - .ps 
    - .fit 
    - .fits 
    - .flc 
    - .fli 
    - .fpx 
    - .ftc 
    - .ftu 
    - .gbr 
    - .gif 
    - .grib 
    - .h5 
    - .hd5 
    - .icns 
    - .ico 
    - .im 
    - .iim 
    - .jpeg 
    - .jp2 
    - .mic 
    - .mpeg 
    - .msp 
    - .pcd 
    - .pcx 
    - .pxr 
    - .png 
    - .ppm 
    - .psd 
    - .sgi
    - .ras 
    - .tga 
    - .tiff 
    - .wmf 
    - .xbm
    - .xpm
  x-subscribelink: masked_face_recognition
  x-apitype: small file
  x-apitypedescription: |+
    Fast | Single-Call | 5 MB/Call
  x-inputfilelimit: |+
    Process up to 5 MB of data per API call.
  x-responsetime: |+
    Response rate is fast due to small data transfer per call made.
  x-billingmethod: |+
    The API is billed by per request.
  x-notes: |+
    File size cannot exceed 5 MB.
  x-apidetailsdesc: |+
    Recognise faces of identities behind a mask.
servers:
  - url: 'https://dev-apis.sentient.io' 
tags:
- name: "v0.1.0"
  description: "Published Date - Feb 08, 2022"
paths:
  /microservices/cv/maskedfacerecognition/v0/getpredictions:
    post:
      tags:
        - v0.1.0
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
              example:
                results:
                  output: {conf: 0.5590788722038269,identity: Teo Chee Hean,location:[71,19,118,82]}

                message: Successfully Processed
                status: Success
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentrequired'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notfound'
        '419':
          description: Input Field Missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputfieldmissing'
        '413':
          description: Payload Too Large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputlimitexceeded'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidinput'       
        '500':
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servererror'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gatewaytimeout'
      security:
        - APIAuthorizer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/input'
        required: true
components:
  schemas:
    success:
      type: object
      properties:
        results:
          type: object
          description: The result of the API call.
          example: { "<Json": "Object>" }
          properties: 
            output:
              type: array
              example: {conf: 0.5590788722038269,identity: Teo Chee Hean,location:[19,118,82,71]}
              description: Details of the masked face recognised from the image
              items:
                oneOf:
                  - type: object 
                    properties:
                      conf:
                        description: Confidence score for recognition
                        example: 0.5590788722038269
                        type: float
                      identity:
                        description: Name of the identity recognised behind the mask
                        example: Teo Chee Hean
                        type: string
                      location:
                        description: bounding box of the face in pixel coordinates of top, right, bottom, left.
                        example: [19,118,82,71]
                        items:
                          oneOf:
                            - type: integer
                              example: 71
                        type: array

        message:
          type: string
          example: Successfully Processed
          description: Detail description on the API status
        status:
          type: string
          example: Success
          description: The status of the API call success/failure
        
    unauthorized:
      type: object
      properties:
        message:
          type: string
          example: Missing Authentication Token
        status:
          type: string
          example: Failure
    forbidden:
      type: object
      properties:
        message:
          type: string
          example: Access Denied Unauthorized User
        status:
          type: string
          example: Failure
    paymentrequired:
      type: object
      properties:
        message:
          type: string
          example: Insufficient Credits Kindly Top Up
        status:
          type: string
          example: Failure
    notfound:
      type: object
      properties:
        message:
          type: string
          example: Invalid Request URL
        status:
          type: string
          example: Failure
    invalidinput:
      type: object
      properties:
        message:
          type: string
          example: Invalid Input
        status:
          type: string
          example: Failure
    servererror:
      type: object
      properties:
        message:
          type: string
          example: Internal Server error
        status:
          type: string
          example: Failure
    gatewaytimeout:
      type: object
      properties:
        message:
          type: string
          example: Request Timeout
        status:
          type: string
          example: Failure
    inputfieldmissing:
      type: object
      properties:
        message:
          type: string
          example: Input Field Missing
        status:
          type: string
          example: Failure
    inputlimitexceeded:
      type: object
      properties:
        message:
          type: string
          example: Input Limit Exceeded
        status:
          type: string
          example: Failure
    versions:
      type: object
      properties: 
        v0.1.0:
          type: array
          items:
            oneOf:
              - type: string
                example: Published Date - Feb 08, 2022
                x-details: Initial version release
                description: Latest Version
    input:
      type: object
      required:
      
        - image_base64
      
      properties:
        image_base64:
          x-name: image_base64
          type: string
          default: True
          example: 
          description: |+
            Input image file in base64 format.
        
        
  securitySchemes:
    APIAuthorizer:
      type: apiKey
      name: x-api-key
      in: header
      x-amazon-apigateway-authtype: custom
      description: Authentication is done using the x-api-key in the request header
