openapi: 3.0.1
info:
  title: HDB Upgrade Programme (SG)
  x-subscribelink: commercial_directories_hdb_sg
  description: |+
   This Data microservice list information of HDB Upgrading and Estate Renewal Programmes which includes:
   - Lift Upgrading Programme
   - Home Improvement Programme
   - Neighbourhood Renewal Programme
   - Interim Upgrading Programme or Interim Upgrading Programme Plus
   - Main Upgrading Programme
   - Selective En bloc Redevelopment Scheme <br>
   Information on HDB’s Upgrading Programmes:
   - Announcement date
   - Completion date
   - Name of upgrading programme
   - Latest status
   - Precinct name/code
   - Block
   - Street
   - XCOORD
   - YCOORD
   
   **Note:** As this microservice uses the GET method, developers using this microservice must remember to have their app encode all the input values to be URL friendly (i.e. all spaces and special characters must be replaced). Here’s a reference on [URL encoding](https://www.w3schools.com/tags/ref_urlencode.ASP).
       
  x-additionalinfo : |+
      Suggested Use Cases:
      - This microservice can help companies such as Property Agencies, HDB Heartlanders and any person who wants to know HDB Upgrading & Estate Renewal Programmes.
      
      **Refining queries in the filterdata field using filter types and match types**
      
      The filterdata fields use elasticsearch’s syntax (specifically filter types and match types) to help further refine search results and provide greater flexibility in structuring more sophisticated queries. 
      
      **Filter Types:**
      
      A filter type is a logic operator to which the search results must fulfill certain logical conditions to be returned. The supported match types are&#58;
      * **must** - All of the stated conditions must match. Equivalent to an AND operator.
        > {"must":[{"match_phrase":{"street":"clementi+west+street+1"}}]}
      * **must_not** - All of the stated conditions must not match. Equivalent to a NOT operator.
      
        > {"must_not":[{"match":{"programme":"hip"}}]}
      * **should** - At least one of the stated conditions should match. Equivalent to an OR operator. 
      
        > {"should":[{"match":{"postalcode":120604}}]}
      * **filter** - All of the stated conditions that must match. However, results are not scored unlike the other filter types which returns results based on how well the conditions are met.
        
        > {"filter":[{"match":{"programme":"hip"}}]}
      For a more detailed guide on filter types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-dsl-bool-query.html).
      Filter types cannot be used alone and must be used in conjunction with a match type to complete the query.
      
      **Match Types:**
      
      A match type is a match operator nested within a filter type that fine-tunes the matching condition of the text search. The supported match types are&#58;
      * **match** - Search within a full text field for a single word
        > {"match":{"street":"clementi+west+street+1"}}
      * **match_phrase** - Search within a full text field
        > {"match_phrase":{ "street":"clementi+west+street+1"}}
      * **match_phrase_prefix** - Search within a full text field with prefix
        > {"match_phrase_prefix":{"street":"clementi+west+street+1"}}
      * **term** - Returns results that contain an exact term in a provided field
        > {"term":{"postalcode":120604}}
      * **terms** - Returns results that contain one or more exact terms in a provided field
        > {"terms":{"postalcode":[120604,120605]}}
        
      * **range** - Returns results that contain terms within a stipulated range
      
        > {"range":{"postalcode":{"lte":120604}}}
        > {"range":{"postalcode":{"gte":120604}}}
        > {"range":{"postalcode":{"gte":120604,"lte":760716}}}
        
      * **exists** - Returns results that contain any indexed value for a field
      
        > {"exists":{ "field": "postalcode"}}
  
      For a more detailed guide to match types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/term-level-queries.html).
      **Forming sophisticated queries using combinations of filter types (in JSON)**
      Multiple filter types can be combined together in one query (written in JSON format) to form a very sophisticated query. Here’s one example below&#58;
      > {
      > "must":[{"match_phrase":{"street":"clementi+west+street+1"}}],
      > "filter":[{"match":{"programme":"hip"}}],
      > "should":[{"match":{"postalcode":120604}}],
      > "must_not":[{"match":{"programme":"lup"}}]
      > }
      **Sample Queries Based on Use Cases**
    
      1. **Search for all commercial directories around clementi+west+street+1**
         Using a querystring only&#58;
         > querystring = "clementi+west+street+1"
      2. **Search for all Upgrade Programmes within a 1KM radius**
         Using a filterdata only&#58;
         > filterdata = {"filter":[{"geo_distance": {"distance": "1km","location": "1.30537726474036,103.7675188978672"}}]}
         
      3. **Search for all HIP programme at Blk 604, CLEMENTI WEST STREET 1**
         Using a filterdata only&#58;
         
         > filterdata = {"filter":[{"match_phrase": {"programme":"hip"}},{"match": {"block":"604"}},{"match_phrase": {"street":"clementi+west+street+1"}}]}
  
  version: '0.1.0'
  x-apitype: small file
  x-apitypedescription: |+
    Fast | Single-Call | 10MB/Call
  x-inputfilelimit: |+
    Process up to 10000 kb of data or chat per API call.
  x-responsetime: |+
    Response rate is fast due to small data transfer per call made.
  x-billingmethod: |+
    The API is billed by the amount of data transferred.
  x-notes: |+
    Process up to 10,000 records.
  x-apidetailsdesc: |+
    Retrieves the list of all retail shops within Housing Development Board.   
servers:
  - url: 'https://dev-apis.sentient.io'
tags:
- name: "v0.1.0"
  description: "Published Date - Aug 01, 2022"
paths:
   /microservices/data/hdb_upgrade_programme/v0/getdata:
    get:
      tags:
        - v0.1.0
      parameters:
        - in: query
          name: querystring
          schema:
            type: string
          description: |+
            Simple keyword search for matches in all searchable fields. Keywords separated by spaces will return results containing any of those keywords. For exact phrase match, put entire phrase in double quotes (" ").
            
            If this field is set to null, by default the microservice will return all retail shops (within the stated limit), which can be further refined through the filterdata field for more sophisticated queries.
            
          example: "clementi+west+street+1"
          required: false
        - in: query
          name: offset
          schema:
            type: integer
          description: The offset of the record list ie the starting index
          example: "0"
          required: false
        - in: query
          name: limit
          schema:
            type: integer
          description: The max records to return for the request. Default - 10, Max - 10000
          example: "10"
          required: false
        - in: query
          name: filterdata
          schema:
            type: string
          description: |+
            Refine the search further on any of the possible through the 4 filter types &#58;
            * must
            * must_not
            * should
            * filter
          required: false
          example: |+
              {"must":[{"match_phrase":{"street":"clementi+west+street+1"}}],"filter":[{"match":{"programme":"hip"}}],"should":[{"match":{"postalcode":120604}}],"must_not":[{"match":{"programme":"lup"}}]}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
              example:
                results:
                  total: 3735
                  max_score: 17.995623
                  hits:
                  - _index: sentient_hdb_upgrade_prog_index
                    _type: dir_doc
                    _id: ofywPYIBJPcGcTBZClcI
                    _score: 18.239067
                    _source:
                      programme: "HIP"
                      batch_no: "001"
                      postal_code: "120604"
                      precinct_code: "CLM01"
                      announcement_date: "2008-02-19"
                      development_status: "COMPLETED"
                      actual_start_of_construction: "2008-09-18"
                      actual_end_of_construction: "2010-06-14"
                      block: " 604 "
                      street: "CLEMENTI WEST STREET 1"
                      xcoord: "20677.0996"
                      ycoord: "31967.5996"
                      location:
                        lat: 1.30537726474036
                        lon: 103.7675188978672
                      createddate: "2022-07-27T11:25:21.962Z"
                      lastupdated: "2022-07-27T11:25:21.962Z"
                      source: "hdb"
                  message: Successfully Processed
                  status: Success
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentrequired'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notfound'
        '419':
          description: Input Field Missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputfieldmissing'
        '413':
          description: Payload Too Large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputlimitexceeded'    
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidinput'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servererror'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gatewaytimeout'
      security:
        - APIAuthorizer: []
components:
  schemas:
    success:
      type: object
      properties:
        results:
          type: object
          example: {<Json Object>}
          description: Json Object of returned results          
          properties:
            total:
              type: integer
              format: int32
              example: 39
              description: Total number of records
            max_score:
              type: number
              format: float
              example: 18.239067
              description: The highest score value
            hits:
              type: array
              example: [{<JSON result Object}]
              description: The list of Json result object              
              items:
                type: object
                properties:
                  _index:
                    type: string
                    description: Index group of the document
                    example: "sentient_hdb_upgrade_prog_index"
                  _type: 
                    type: string
                    description: Content type of the document
                    example: "dir_doc"
                  _id: 
                    type: string
                    description: Document ID
                    example: "ofywPYIBJPcGcTBZClcI"
                  _score: 
                    type: number
                    format: float
                    description: The document score for the search request
                    example: 18.239067
                  _source: 
                    type: object
                    example: {<Json Object>}
                    description: Json Object of returned hits                  
                    properties:
                            programme: 
                              type: string
                              description: Programme
                              example: "HIP"
                            batch_no: 
                              type: string
                              description: Batch Number
                              example: 001
                            postal_code: 
                              type: integer
                              format: int32
                              description: Postal Code
                              example: "120604"
                            precinct_code: 
                              type: string
                              description: Precinct Code
                              example: "CLM01"
                            source: 
                              type: string
                              description: Dataset source
                              example: "hdb"
                            announcement_date: 
                              type: string
                              description: Announcement Date
                              example: "2008-02-19"
                            development_status:
                              type: string
                              description: Development Status
                              example: "COMPLETED"
                            actual_start_of_construction:
                              type: string
                              description: Actual Start of Construction
                              example: "2008-09-18"
                            actual_end_of_construction:
                              type: string
                              description: Actual End of Construction
                              example: "2010-06-14"
                            block:
                              type: integer
                              format: int
                              description: Block Number
                              example: "604"
                            lastupdated:
                              type: string
                              format: date
                              description: Record last updated date
                              example: "2022-07-27"
                            createddate:
                              type: string
                              format: date
                              description: Record created date
                              example: "2022-07-27"
                            street:
                              type: string
                              description: Full street name
                              example: "CLEMENTI WEST STREET 1"
                            xcoord:
                              type: number
                              format: float
                              description: X - coordinates
                              example: 20677.0996
                            ycoord:
                              type: number
                              format: float
                              description: Y - Coordinates
                              example: 31967.5996
                            location:
                              type: object
                              description: Lat/Lon
                              example: {"lat":1.30537726474036,"lon":103.7675188978672}
                              properties:
                                  lat: 
                                    type: number
                                    format: float
                                    description: Latitude
                                    example: 1.30537726474036
                                  lon:
                                    type: number
                                    format: float 
                                    description: Longitude
                                    example: 103.7675188978672
        message:
          type: string
          example: Successfully Processed
          description: Description of the API status.
        status:
          type: string
          example: Success
          description: The status of the API call - success/failure.
    unauthorized:
      type: object
      properties:
        message:
          type: string
          example: Missing Authentication Token
        status:
          type: string
          example: Failure
    forbidden:
      type: object
      properties:
        message:
          type: string
          example: Access Denied Unauthorized User
        status:
          type: string
          example: Failure
    paymentrequired:
      type: object
      properties:
        message:
          type: string
          example: Insufficient Credits Kindly Top Up
        status:
          type: string
          example: Failure
    notfound:
      type: object
      properties:
        message:
          type: string
          example: Invalid Request URL
        status:
          type: string
          example: Failure
    servererror:
      type: object
      properties:
        message:
          type: string
          example: Internal Server Error
        status:
          type: string
          example: Failure
    gatewaytimeout:
      type: object
      properties:
        message:
          type: string
          example: Request Timeout
        status:
          type: string
          example: Failure
    inputfieldmissing:
      type: object
      properties:
        message:
          type: string
          example: Input Field Missing
        status:
          type: string
          example: Failure
    inputlimitexceeded:
      type: object
      properties:
        message:
          type: string
          example: Input Limit Exceeded
        status:
          type: string
          example: Failure  
    invalidinput:
      type: object
      properties:
        message:
          type: string
          example: Invalid Input
        status:
          type: string
          example: Failure
    versions:
      type: object
      properties:
        v0.1.0:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - Aug 01, 2022
              x-details: Initial version release
              description: Latest Version
  securitySchemes:
    APIAuthorizer:
      type: apiKey
      name: x-api-key
      in: header
      x-amazon-apigateway-authtype: custom
      description: Authentication is done using the x-api-key in the request header.
