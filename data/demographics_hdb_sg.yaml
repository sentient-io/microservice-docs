openapi: 3.0.1
info:
  title: HDB Demographics (SG)
  x-subscribelink: demographics_hdb_sg
  description: |+
   This Data microservice returns information on Housing Development Board (HDB) estates which includes the location address, postal code, gender and age groups, down to block-level granularity. 
   The HDB POTH programme makes selected public and non-public datasets available to developers and companies to improve their service offerings to benefit the lives of Singapore citizens. Sentient.io is proud to partner with HDB to manage and facilitate the sharing of data for the POTH Programme.
   
   **Note:** As this microservice uses the GET method, developers using this microservice must remember to have their app encode all the input values to be URL friendly (i.e. all spaces and special characters must be replaced). Here’s a reference on [URL encoding](https://www.w3schools.com/tags/ref_urlencode.ASP).
       
  x-additionalinfo : |+
    Suggested Use Cases:
    - This microservice can be used as a solution to help businesses better understand and connect with their customers, engage new prospects and increase revenue. For example, it can be used to create intelligent prospect lists that ensure one is always maximizing their marketing investment.
    
    **Refining queries in the filterdata field using filter types and match types**
    The filterdata fields use elasticsearch’s syntax (specifically filter types and match types) to help further refine search results and provide greater flexibility in structuring more sophisticated queries. 
  
    **Filter Types:**
    A filter type is a logic operator to which the search results must fulfill certain logical conditions to be returned. The supported match types are&#58;
    
    * **must** - All of the stated conditions must match. Equivalent to an AND operator.
    
      > {"must":[{"match_phrase":{"street":"serangoon north avenue 4"}}]}
    
    * **must_not** - All of the stated conditions must not match. Equivalent to a NOT operator.
      > {"must_not":[{"match":{"postalcode":570251}}]}
    
    * **should** - At least one of the stated conditions should match. Equivalent to an OR operator. 
      > {"should":[{"match_phrase":{"street":"serangoon north avenue 4"}}]}
    
    * **filter** - All of the stated conditions that must match. However, results are not scored unlike the other filter types which returns results based on how well the conditions are met.
      > {"filter":[{"match":{"street":"serangoon"}}]}
      
    For a more detailed guide on filter types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-dsl-bool-query.html).
    
    Filter types cannot be used alone and must be used in conjunction with a match type to complete the query.
    **Match Types:**
    A match type is a match operator nested within a filter type that fine-tunes the matching condition of the text search. The supported match types are&#58;
    
    * **match** - Search within a full text field for a single word
      > {"match":{"street":"serangoon"}}
    * **match_phrase** - Search within a full text field
      > {"match_phrase":{"street":"serangoon central"}}
    * **match_phrase_prefix** - Search within a full text field with prefix
      > {"match_phrase_prefix":{"street":"serangoon central"}}
    * **term** - Returns results that contain an exact term in a provided field
      > {"term":{"postalcode":560720}}
    * **terms** - Returns results that contain one or more exact terms in a provided field
      > {"terms":{"postalcode":[560720,560721]}}
      
    * **range** - Returns results that contain terms within a stipulated range
    
      > {"range":{"residents":{"gte":10}}}
      > {"range":{"residents":{"lte":50}}}
      > {"range":{"residents":{"gte":10,"lte":50}}}
      
    * **exists** - Returns results that contain any indexed value for a field
    
      > {"exists":{ "field":"postalcode"}}
    For a more detailed guide to match types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/term-level-queries.html).
    
    **Forming sophisticated queries using combinations of filter types (in JSON)**
    Multiple filter types can be combined together in one query (written in JSON format) to form a very sophisticated query. Here’s one example below&#58;
    
     > {
     > "must":[{"match_phrase":{"street":"serangoon+central"}}],
     > "filter":[{"range":{"residents":{"gte":10}}}],
     > "should":[{"match":{"gender":"male"}}],
     > "must_not":[{"match":{"age_group_id":"2"}}]
     > }
    **Sample Queries Based on Use Cases**
    
    1. **Search for the number of elderly residents staying at Blk 423, Tampines Street 41 filter by age and gender.**
      Using a filterdata only&#58;
      
      > {"filter":[{"match":{"street":"tampines street 41"}},{"match":{"block":"423"}},{"terms":{"age_group_id":[6,7,8]}}]}
      
    2. **Search for the number of female residents between age 50 to 59 staying in the postal code from 560720 to 560721.**
      Using a filterdata only&#58;
      
      > {"filter":[{"terms":{"postalcode":[560720,560721]}},{"match":{"gender":"female"}},{"terms":{"age_group_id":[6]}}]}
  version: '1.0.0'
  x-apitype: small file
  x-apitypedescription: |+
    Fast | Single-Call | 10MB/Call
  x-inputfilelimit: |+
    Process up to 10000 kb of data or chat per API call.
  x-responsetime: |+
    Response rate is fast due to small data transfer per call made.
  x-billingmethod: |+
    The API is billed by the amount of data transferred.
  x-notes: |+
    Process up to 10,000 records.
  x-apidetailsdesc: |+
    Provides information on Housing Development Board (HDB) estates.
servers:
  - url: 'https://apis.sentient.io'
tags:
- name: "v1.0.0"
  description: "Published Date - May 21, 2021"
paths:
  /microservices/data/demographics/v1/getdata:
    get:
      tags:
        - v1.0.0
      parameters:
        - in: query
          name: querystring
          schema:
            type: string
          description: |+ 
            Simple keyword search for matches in all searchable fields. Keywords separated by spaces will return results containing any of those keywords. For exact phrase match, put entire phrase in double quotes (" ").
            
            If this field is set to null, by default the microservice will return all buildings (within the stated limit), which can be further refined through the filterdata field for more sophisticated queries.
            
          example: "tampines"
          default: false
        - in: query
          name: offset
          schema:
            type: integer
          description: The offset of the record list ie the starting index
          example: "0"
          default: false
        - in: query
          name: limit
          schema:
            type: integer
          description: The max records to return for the request. Default - 10, Max - 10000
          example: "10"
          default: false
        - in: query
          name: filterdata
          schema:
            type: string
          description: |+
            Refine the search further on any of the possible through the 4 filter types &#58;
            * must
            * must_not
            * should
            * filter
          default: false
          example: |+
            {"filter":[{"match":{"age_group_id":7}},{"match":{"gender":"male"}},{"match":{"postalcode":520423}}]}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
              example:
                results:
                  total: 986
                  max_score: 17.995623
                  hits:
                  - _index: sentient_hdb_demographics_index
                    _type: dir_doc
                    _id: K7scqWgBv3dNEHq2WvMo
                    _score: 17.995623
                    _source:
                      postalcode: 560720
                      gender: 'male'
                      age_group: '50 to 59'
                      age_group_id: 6
                      residents: 54
                      block: '34'
                      street: 'upper cross street'
                      xcoord: 29520.58
                      ycoord: 39311.68
                      address: '34 upper cross street'
                      createddate: '2020-04-23'
                      lastupdated: '2020-04-23'
                      location:
                        lat: 1.37179535
                        lon: 103.8469821
                      source: hdb
                message: Successfully Processed
                status: Success                              
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentrequired'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notfound'
        '419':
          description: Input Field Missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputfieldmissing'
        '413':
          description: Payload Too Large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputlimitexceeded'    
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidinput'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servererror'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gatewaytimeout'
      security:
        - APIAuthorizer: []
components:
  schemas:
    success:
      type: object
      properties:
        results:
          type: object
          example: {<Json Object>}
          description: Json Object in the returned results 
          properties:
            total:
              type: integer
              format: int32
              example: 986
              description: Total number of records
            max_score:
              type: number
              format: float
              example: 17.995623
              description: The highest score value
            hits:
              type: array
              example: [{<JSON result Object}]
              description: The list of Json result object
              items:
                type: object
                properties:
                  _index:
                    type: string
                    description: Index group of the document
                    example: "sentient_demographics_hdb_index"
                  _type: 
                    type: string
                    description: Content type of the document
                    example: "dir_doc"
                  _id: 
                    type: string
                    description: Document ID
                    example: "K7scqWgBv3dNEHq2WvMo"
                  _score: 
                    type: number
                    type: format
                    description: The document score for the search request
                    example: 17.995623
                  _source: 
                    type: object
                    example: {<Json Object>}
                    description: Json Object of returned hits                    
                    properties:
                            postalcode: 
                              type: integer
                              format: int32
                              description: Postal code of a block
                              example: 560720
                            gender: 
                              type: string
                              description: Gender details, values are male/female
                              example: "male"
                            age_group: 
                              type: string
                              description: Range of age groups
                              example: "50 to 59"
                            age_group_id:
                              type: integer
                              format: int32
                              description: |+
                                Age group ID represents a certain age range&#58;
                                1 (<10 years)
                                2 (10-19 years)
                                3 (20-29 years)
                                4 (30-39 years)
                                5 (40-49 years)
                                6 (50-59 years)
                                7 (60-69 years)
                                8 (>70 years)
                              example: 6
                            residents:
                              type: integer
                              format: int32
                              description: Number of residents
                              example: 54
                            block:
                              type: integer
                              format: int32
                              description: Address block
                              example: "34"
                            street:
                              type: string
                              description: Street Address or building name
                              example: "upper cross street"
                            xcoord:
                              type: number
                              format: float
                              description: SVY21 X coordinates (Note, SVY21 is a localised plane coordinate system used specifically by Singapore. For global GPS lat/long coordinates, refer to "location" object).
                              example: 29520.58
                            ycoord:
                              type: number
                              format: float
                              description: SVY21 Y coordinates (Note, SVY21 is a localised plane coordinate system used specifically by Singapore. For global GPS lat/long coordinates, refer to "location" object).
                              example: 39311.68
                            address:
                              type: string
                              description: Building full address
                              example: "34 upper cross street"
                            createddate:
                              type: string
                              description: Record first release date on sentient
                              example: "2020-04-23"
                            lastupdated:
                              type: string
                              description: Record last updated date on sentient
                              example: "2020-04-23"
                            location:
                              type: object
                              description: WGS84 coordinates lat/long
                              example: {"lat":1.37179535,"lon":103.8469821}                                  
                              properties:
                                  lat: 
                                    type: number
                                    format: float
                                    description: Latitude in the WGS84 coordinate format
                                    example: 1.37179535
                                  lon:
                                    type: number
                                    format: float
                                    description: Longitude in the WGS84 coordinate format
                                    example: 103.8469821
                            source: 
                              type: string
                              description: Dataset source
                              example: "hdb"
        message:
          type: string
          example: Successfully Processed
          description:  Description of the API the status
        status:
          type: string
          example: Success
          description: The status of the API call - success/failure
    unauthorized:
      type: object
      properties:
        message:
          type: string
          example: Missing Authentication Token
        status:
          type: string
          example: Failure
    forbidden:
      type: object
      properties:
        message:
          type: string
          example: Access Denied Unauthorized User
        status:
          type: string
          example: Failure
    paymentrequired:
      type: object
      properties:
        message:
          type: string
          example: Insufficient Credits Kindly Top Up
        status:
          type: string
          example: Failure
    notfound:
      type: object
      properties:
        message:
          type: string
          example: Invalid Request URL
        status:
          type: string
          example: Failure
    servererror:
      type: object
      properties:
        message:
          type: string
          example: Internal Server Error
        status:
          type: string
          example: Failure
    gatewaytimeout:
      type: object
      properties:
        message:
          type: string
          example: Request Timeout
        status:
          type: string
          example: Failure
    inputfieldmissing:
      type: object
      properties:
        message:
          type: string
          example: Input Field Missing
        status:
          type: string
          example: Failure
    inputlimitexceeded:
      type: object
      properties:
        message:
          type: string
          example: Input Limit Exceeded
        status:
          type: string
          example: Failure 
    invalidinput:
      type: object
      properties:
        message:
          type: string
          example: Invalid Input
        status:
          type: string
          example: Failure
    versions:
      type: object
      properties: 
        v1.0.0:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - May 21,2021
              x-details: Optimized release
              description: Latest Version
        v0.1.0:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - May 15,2020
              x-details: Initial version release
              description: Archived
  securitySchemes:
    APIAuthorizer:
      type: apiKey
      name: x-api-key
      in: header
      x-amazon-apigateway-authtype: custom
      description: Authentication is done using the x-api-key in the request header.
