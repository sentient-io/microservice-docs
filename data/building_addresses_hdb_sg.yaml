openapi: 3.0.1
info:
  title: HDB Block Coordinates (SG)
  x-subscribelink: building_addresses_hdb_sg
  description: |+
    This Data microservice retrieves information on Housing Development Board (HDB) building blocks in Singapore which includes address, postal code, latitude and longitude coordinates. The information is updated monthly. A successful call will return the results of the query in JSON format.
    The HDB POTH programme makes selected public and non-public datasets available to developers and companies to improve their service offerings to benefit the lives of Singapore citizens. Sentient.io is proud to partner with HDB to manage and facilitate the sharing of data for the POTH Programme.
   
    **Note:** As this microservice uses the GET method, developers using this microservice must remember to have their app encode all the input values to be URL friendly (i.e. all spaces and special characters must be replaced). Here’s a reference on [URL encoding](https://www.w3schools.com/tags/ref_urlencode.ASP).
       
  x-additionalinfo : |+
    Suggested Use Cases:
    - Information from this microservice can be used to build a geo-targeting app with precise map features. 
    
    **Refining queries in the filterdata field using filter types and match types**
    
    The filterdata fields use elasticsearch’s syntax (specifically filter types and match types) to help further refine search results and provide greater flexibility in structuring more sophisticated queries. 
  
    **Filter Types:**
    
    A filter type is a logic operator to which the search results must fulfill certain logical conditions to be returned. The supported match types are&#58;
    
    * **must** - All of the stated conditions must match. Equivalent to an AND operator.
    
      > {"must":[{"range":{"block":{"gte":100}}}]}
    
    * **must_not** - All of the stated conditions must not match. Equivalent to a NOT operator.
      > {"must_not":[{"match":{"street":"avenue 3"}}]}
    
    * **should** - At least one of the stated conditions should match. Equivalent to an OR operator. 
      > {"should":[{"range":{"block":{"lte":200}}}]}
    
    * **filter** - All of the stated conditions that must match. However, results are not scored unlike the other filter types which returns results based on how well the conditions are met.
      > {"filter":[{"match_phrase":{"street":"ang mo kio"}}]}
      
    For a more detailed guide on filter types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-dsl-bool-query.html).
    
    Filter types cannot be used alone and must be used in conjunction with a match type to complete the query.
    
    **Match Types:**
    
    A match type is a match operator nested within a filter type that fine-tunes the matching condition of the text search. The supported match types are&#58;
    
    * **match** - Search within a full text field for a single word
      > {"match":{"street":"serangoon"}}
    * **match_phrase** - Search within a full text field
      > {"match_phrase":{"street":"ang mo kio street"}}
    * **match_phrase_prefix** - Search within a full text field with prefix
      > {"match_phrase_prefix":{"street":"ang mo kio"}}
    * **term** - Returns results that contain an exact term in a provided field
      > {"term":{"postalcode":550151}}
    * **terms** - Returns results that contain one or more exact terms in a provided field
      > {"terms":{"postalcode":[550151,550152]}}
    * **range** - Returns results that contain terms within a stipulated range
        > {"range":{"postalcode":{"lte":650347}}}
        > {"range":{"postalcode":{"gte":650347}}}
        > {"range":{"postalcode":{"gte":650347,"lte":760415}}}
      
    * **exists** - Returns results that contain any indexed value for a field
      > {"exists":{ "field": "postalcode"}}
    For a more detailed guide to match types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/term-level-queries.html).
    
    **Forming sophisticated queries using combinations of filter types (in JSON)**
    
    Multiple filter types can be combined together in one query (written in JSON format) to form a very sophisticated query. Here’s one example below&#58;
    
     > {
     > "must":[{"range":{"block":{"gte":100}}}],
     > "should":[{"range":{"block":{"lte":200}}}],
     > "filter":[{"match_phrase":{"street":"ang mo kio"}}],
     > "must_not":[{"match":{"street":"avenue 3"}}]
     > }
    **Sample Queries Based on Use Cases**
    1. **Search the latitude and longitude coordinates for 442 Pasir Ris Drive 6**
    
       Using a filterdata only&#58;
       > filterdata = {"filter":[{"geo_distance": {"distance": "1km","location": "1.368960,103.957980"}}]}
       
  version: '1.1.0'
  x-apitype: small file
  x-apitypedescription: |+
    Fast | Single-Call | 10MB/Call
  x-inputfilelimit: |+
    Process up to 10000 kb of data per API call.
  x-responsetime: |+
    Response rate is fast due to small data transfer per call made.
  x-billingmethod: |+
    The API is billed by the amount of data transferred.
  x-notes: |+
    Process up to 10,000 records.
  x-apidetailsdesc: |+
    Retrieves information on the Housing Development Board (HDB) building blocks in Singapore.
servers:
  - url: 'https://apis.sentient.io'
tags:
- name: "v1.1.0"
  description: "Published Date - Jul 13, 2022"
paths:
   /microservices/data/directories_searchbranch/v1/getdata:
    get:
      tags:
        - v1.1.0
      parameters:
        - in: query
          name: querystring
          schema:
            type: string
          description: |+ 
            Simple keyword search for matches in all searchable fields. Keywords separated by spaces will return results containing any of those keywords. For exact phrase match, put entire phrase in double quotes (" ").
            
            If this field is set to null, by default the microservice will return all buildings (within the stated limit), which can be further refined through the filterdata field for more sophisticated queries.
            
          example: "serangoon"
          default: false
        - in: query
          name: offset
          schema:
            type: number
          description: The offset of the record list ie the starting index
          example: "0"
          default: false
        - in: query
          name: limit
          schema:
            type: number
          description: The max records to return for the request. Default - 10, Max - 10000
          example: "10"
          default: false
        - in: query
          name: filterdata
          schema:
            type: string
          description: |+
            Refine the search further on any of the possible through the 4 filter types &#58;
            * must
            * must_not
            * should
            * filter
          default: false
          example: |+
              {"must":[{"range":{"block":{"gte":100}}}],"should":[{"range":{"block":{"lte":500}}}],"filter":[{"match_phrase":{"street":"serangoon central"}}],"must_not":[{"match":{"postalcode":343534}}]}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
              example:
                results:
                  total: 1
                  max_score: 12.08503
                  hits:
                  - _index: sentient_building_directory_index
                    _type: dir_doc
                    _id: uLxcqWgBv3dNEHq2Dznn
                    _score: 12.08503
                    _source:
                      buildingname: nex
                      postalcode: 556083
                      block: '23'
                      street: serangoon central
                      location:
                        lat: 1.350748
                        lon: 103.872798
                      source: starhub
                      createddate: 'Feb 01, 2019'
                message: Successfully Processed
                status: Success
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentrequired'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notfound'
        '419':
          description: Input Field Missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputfieldmissing'
        '413':
          description: Payload Too Large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputlimitexceeded'    
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidinput'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servererror'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gatewaytimeout'
      security:
        - APIAuthorizer: []
components:
  schemas:
    success:
      type: object
      properties:
        results:
          type: object
          example: {<Json Object>}
          description: Json Object of returned results 
          properties:                
            total: 
              type: number
              example: 1
              description: Total number of records
            max_score:
              type: float
              example: 17.995623
              description: The highest score value                   
            hits:
              type: array
              example: [{<JSON result Object}]
              description: The list of Json result object
              items:
                type: object
                properties:                      
                    _index:
                      type: string
                      description: Index group of the document
                      example: "sentient_directory_building_index"
                    _type: 
                      type: string
                      description: Content type of the document
                      example: "dir_doc"
                    _id: 
                      type: string
                      description: Document ID
                      example: "uLxcqWgBv3dNEHq2Dznn"                    
                    _score: 
                      type: float
                      description: The document score for the search request
                      example: 12.08503                    
                    _source:
                      type: object
                      example: {<Json Object>}
                      description: Json Object of returned hits
                      properties: 
                          buildingname:
                            type: string
                            description: Building Name
                            example: "nex"
                          street:
                            type: string
                            description: Street Name of Building
                            example: "serangoon central"
                          postalcode:
                            type: number
                            
                            description: Postal code
                            example: 556083      
                          block: 
                            type: string
                            description: Block Number
                            example: "23"
                          location:
                            type: object
                            description: WGS84 coordinates lat/long
                            example: {"lat":1.350748,"lon":103.872798}
                            properties:
                                lat: 
                                  type: string
                                  description: WGS84 latitude
                                  example: 1.350748
                                lon:
                                  type: string
                                  description: WGS84 longitude
                                  example: 103.872798                        
                          source: 
                            type: string
                            description: Dataset source
                            example: "hdb"
                          createddate:
                            type: string
                            description: Record first released date on Sentient.io
                            example: "Feb 01, 2019"                      
        message:
          type: string
          example: Successfully Processed
          description: Description of the API status
        status:
          type: string
          example: Success
          description: The status of the API call - success/failure
    unauthorized:
      type: object
      properties:
        message:
          type: string
          example: Missing Authentication Token
        status:
          type: string
          example: Failure
    forbidden:
      type: object
      properties:
        message:
          type: string
          example: Access Denied Unauthorized User
        status:
          type: string
          example: Failure
    paymentrequired:
      type: object
      properties:
        message:
          type: string
          example: Insufficient Credits Kindly Top Up
        status:
          type: string
          example: Failure
    notfound:
      type: object
      properties:
        message:
          type: string
          example: Invalid Request URL
        status:
          type: string
          example: Failure
    servererror:
      type: object
      properties:
        message:
          type: string
          example: Internal Server Error
        status:
          type: string
          example: Failure
    gatewaytimeout:
      type: object
      properties:
        message:
          type: string
          example: Request Timeout
        status:
          type: string
          example: Failure
    inputfieldmissing:
      type: object
      properties:
        message:
          type: string
          example: Input Field Missing
        status:
          type: string
          example: Failure
    inputlimitexceeded:
      type: object
      properties:
        message:
          type: string
          example: Input Limit Exceeded
        status:
          type: string
          example: Failure
    invalidinput:
      type: object
      properties:
        message:
          type: string
          example: Invalid Input
        status:
          type: string
          example: Failure
    versions:
      type: object
      properties:
        v1.1.0:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - Jul 13, 2022
              x-details: Optimized release
              description: Latest Version
        v1.0.0:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - May 21, 2021
              x-details: Optimized release
              description: Older Version
        v0.1.0:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - Nov 25,2019
              x-details: Initial version release
              description: Archived
  securitySchemes:
    APIAuthorizer:
      type: apiKey
      name: x-api-key
      in: header
      x-amazon-apigateway-authtype: custom
      description: Authentication is done using the x-api-key in the request header.
