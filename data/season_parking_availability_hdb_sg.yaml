openapi: 3.0.1
info:
  title: HDB Season Parking Availability (SG)
  x-subscribelink: season_parking_availability_hdb_sg
  description: |+
     This Data microservice returns information on season car park availability within Housing Development Board of Singapore (HDB) estates which includes the location address, postal code, branch office, vehicle type and parking lot availability for different types of vehicle by carpark location. 
     The HDB POTH programme makes selected public and non-public datasets available to developers and companies to improve their service offerings to benefit the lives of Singapore citizens. Sentient.io is proud to partner with HDB to manage and facilitate the sharing of data for the POTH Programme.
     **Note:** As this microservice uses the GET method, developers using this microservice must remember to have their app encode all the input values to be URL friendly (i.e. all spaces and special characters must be replaced). Here’s a reference on [URL encoding](https://www.w3schools.com/tags/ref_urlencode.ASP).
  
  x-additionalinfo : |+
    Suggested Use Cases:
    - Real estate services - can be used as a background check solution to extract information related to season car park availability in an area for people with certain preferences when buying or renting a HDB home. 
    - Can also be integrated into apps related to maps or parking for more detailed carpark information within Singapore HDB estates
    
    **Refining queries in the filterdata field using filter types and match types**
    The filterdata fields use elasticsearch’s syntax (specifically filter types and match types) to help further refine search results and provide greater flexibility in structuring more sophisticated queries. 
  
    **Filter Types:**
    A filter type is a logic operator to which the search results must fulfill certain logical conditions to be returned. The supported match types are&#58;
    
    * **must** - All of the stated conditions must match. Equivalent to an AND operator.
    
      > {"must":[{"match_phrase":{"street":"serangoon north avenue 4"}}]}
    
    * **must_not** - All of the stated conditions must not match. Equivalent to a NOT operator.
      > {"must_not":[{"match":{"postalcode":570251}}]}
    
    * **should** - At least one of the stated conditions should match. Equivalent to an OR operator. 
      > {"should":[{"match_phrase":{"street":"serangoon north avenue 4"}}]}
    
    * **filter** - All of the stated conditions that must match. However, results are not scored unlike the other filter types which returns results based on how well the conditions are met.
      > {"filter":[{"match":{"street":"serangoon"}}]}
      
    For a more detailed guide on filter types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-dsl-bool-query.html).
    
    Filter types cannot be used alone and must be used in conjunction with a match type to complete the query.
    
    **Match Types:**
    
    A match type is a match operator nested within a filter type that fine-tunes the matching condition of the text search. The supported match types are&#58;
    
    * **match** - Search within a full text field for a single word
      > {"match":{"street":"serangoon"}}
    * **match_phrase** - Search within a full text field
      > {"match_phrase":{"street":"bishan street 24"}}
    * **match_phrase_prefix** - Search within a full text field with prefix
      > {"match_phrase_prefix":{"street":"bishan street 24"}}
    * **term** - Returns results that contain an exact term in a provided field
      > {"term":{"car_park_group":"G15"}}
    * **terms** - Returns results that contain one or more exact terms in a provided field
      > {"terms":{"car_park_group":["G15","G39"]}}
      
    * **range** - Returns results that contain terms within a stipulated range
    
      > {"range":{"car_park_availability":{"gte":10}}}
      > {"range":{"car_park_availability":{"lte":50}}}
      > {"range":{"car_park_availability":{"gte":10,"lte":50}}}
      
    * **exists** - Returns results that contain any indexed value for a field
    
      > {"exists":{ "field": "postalcode"}}
    For a more detailed guide to match types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/term-level-queries.html).
    
    **Forming sophisticated queries using combinations of filter types (in JSON)**
    Multiple filter types can be combined together in one query (written in JSON format) to form a very sophisticated query. Here’s one example below&#58;
    
     > {
     > "must":[{"match_phrase":{"street":"serangoon north avenue 4"}}],
     > "filter":[{"match":{"vehicle_type":"Y"}}],
     > "should":[{"match":{"car_park_group":"G18"}}],
     > "must_not":[{"match":{"postalcode":550409}}]
     > }
    **Sample Queries Based on Use Cases**
    
    1. **Search for the parking lot availability for commercial vehicle at the carpark of 503 Serangoon North Avenue 4.**
    
       Using a filterdata only&#58;
      
       > filterdata = {"filter":[{"match":{"street":"serangoon north avenue 4"}},{"match":{"block":"503"}},{"match":{"vehicle_type":"H"}}]}
       
  version: '1.1.0'
  x-apitype: small file
  x-apitypedescription: |+
    Fast | Single-Call | 10MB/Call
  x-inputfilelimit: |+
    Process up to 10000 kb of data or chat per API call.
  x-responsetime: |+
    Response rate is fast due to small data transfer per call made.
  x-billingmethod: |+
    The API is billed by per request.
  x-notes: |+
    Process up to 10,000 records.
  x-apidetailsdesc: |+
    Provides season car park availability within Housing Development Board.
servers:
  - url: 'https://dev-apis.sentient.io'
tags:
- name: "v1.1.0"
  description: "Published Date - Jun 30,2022"
paths:
   /microservices/data/carparkavailability/v1/getdata:
    get:
      tags:
        - v1.1.0
      parameters:
        - in: query
          name: querystring
          schema:
            type: string
          description: |+
            Simple keyword search for matches in all searchable fields. Keywords separated by spaces will return results containing any of those keywords. For exact phrase match, put entire phrase in double quotes (" ").
            
            If this field is set to null, by default the microservice will return all carparks (within the stated limit), which can be further refined through the filterdata field for more sophisticated queries.
            
          example: serangoon
          default: false
        - in: query
          name: offset
          schema:
            type: integer
          description: The offset of the record list ie the starting index
          example: "0"
          default: false
        - in: query
          name: limit
          schema:
            type: integer
          description: The max records to return for the request. Default - 10, Max - 10000
          example: "10"
          default: false
        - in: query
          name: filterdata
          schema:
            type: string  
          description: |+
            Refine the search further on any of the possible through the 4 filter types &#58;
            * must
            * must_not
            * should
            * filter
          default: false
          example: |+
            {"must":[{"match_phrase":{"street":"serangoon north avenue 4"}}],"filter":[{"match":{"vehicle_type":"Y"}}],"should":[{"match":{"car_park_group":"G18"}}],"must_not":[{"match":{"postalcode":550409}}]}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
              example:
                results:
                  total: 1
                  max_score: 13.663734
                  hits:
                  - _index: sentient_hdb_carparklotsavailble_index
                    _type: dir_doc
                    _id: AM/G40/Y/552506
                    _score: 13.663734
                    _source:
                      branch_office: AM
                      car_park_group: G40
                      vehicle_type: Y
                      car_park_availability: 15
                      postalcode: 552506
                      block: 506B
                      street: serangoon north avenue 4
                      xcoord: 32714.002
                      ycoord: 39399.7461
                      address: 506B serangoon north avenue 4
                      createddate: '2020-05-07'
                      lastupdated: '2020-05-07'
                      location:
                        lat: 1.37259145
                        lon: 103.8756772
                      source: hdb
                message: Successfully Processed
                status: Success
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentrequired'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notfound'
        '419':
          description: Input Field Missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputfieldmissing'
        '413':
          description: Payload Too Large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputlimitexceeded'    
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidinput'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servererror'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gatewaytimeout'
      security:
        - APIAuthorizer: []
components:
  schemas:
    success:
      type: object
      properties:
        results:
          type: object
          example: {<Json Object>}
          description: Json Object of returned results
          properties:
            total:
              type: integer
              example: 1
              description: Total number of records
            max_score:
              type: float
              example: 13.663734
              description: The highest score value
            hits:
              type: array
              example: [{<JSON result Object}]
              description: The list of Json result object
              items:
                type: object
                properties:
                  _type: 
                    type: string
                    description: Content type of the document
                    example: "dir_doc"
                  _id: 
                    type: string
                    description: Document ID
                    example: "AM/G40/Y/552506"
                  _score: 
                    type: float
                    description: The document score for the search request
                    example: 13.663734
                  _source: 
                    type: object
                    example: {<Json Object>}
                    description: Json Object of returned hits
                    properties:
                            branch_office: 
                              type: string
                              description: Branch Office
                              example: AM
                            car_park_group: 
                              type: string
                              description: Car Park Group
                              example: "G40"
                            vehicle_type: 
                              type: string
                              description: |+
                                Vehicle Type&#58;
                                
                                Y - Motorcycle
                                H - Commercial Vehicle (>1800kg)
                                C - Car
                                S - Season (Car)
                              example: "Y"
                            car_park_availability: 
                              type: integer
                              format: int32
                              description: Car Park Availability
                              example: 15
                            postalcode: 
                              type: integer
                              format: int32
                              description: Postal code
                              example: 552506
                            block: 
                              type: string
                              description: Block
                              example: "506B"
                            street: 
                              type: string
                              description: street
                              example: "serangoon north avenue 4"                              
                            xcoord:
                              type: number
                              format: float
                              description: SVY21 X coordinates (Note, SVY21 is a localised plane coordinate system used specifically by Singapore. For global GPS lat/long coordinates, refer to "location" object)
                              example: 32714.002
                            ycoord:
                              type: number
                              format: float
                              description: SVY21 Y coordinates (Note, SVY21 is a localised plane coordinate system used specifically by Singapore. For global GPS lat/long coordinates, refer to "location" object)
                              example: 39399.7461
                            address:
                              type: string
                              description: address
                              example: 506B serangoon north avenue 4
                            source:
                              type: string
                              description: Dataset source
                              example: hdb
                            location:
                              type: object
                              description: WGS84 coordinates lat/long
                              example: {"lat":1.37259145,"lon":103.8756772}
                              properties:
                                  lat: 
                                    type: number
                                    format: float
                                    description: Latitude in the WGS84 coordinate format
                                    example: 1.37259145
                                  lon:
                                    type: number
                                    format: float
                                    description: Longitude in the WGS84 coordinate format
                                    example: 103.8756772
                            createddate:
                              type: string
                              description: Record first release date on sentient
                              example: "2019-10-17"
                            lastupdated:
                              type: string
                              description: Record last updated date on sentient
                              example: "2019-10-17"
        message:
          type: string
          example: Successfully Processed
          description: Description of the API status
        status:
          type: string
          example: Success
          description: The status of the API call - Success/Failure
    unauthorized:
      type: object
      properties:
        message:
          type: string
          example: Missing Authentication Token
        status:
          type: string
          example: Failure
    forbidden:
      type: object
      properties:
        message:
          type: string
          example: Access Denied Unauthorized User
        status:
          type: string
          example: Failure
    paymentrequired:
      type: object
      properties:
        message:
          type: string
          example: Insufficient Credits Kindly Top Up
        status:
          type: string
          example: Failure
    invalidinput:
      type: object
      properties:
        message:
          type: string
          example: Invalid Input
        status:
          type: string
          example: Failure
    notfound:
      type: object
      properties:
        message:
          type: string
          example: Invalid Request URL
        status:
          type: string
          example: Failure
    servererror:
      type: object
      properties:
        message:
          type: string
          example: Internal Server Error
        status:
          type: string
          example: Failure
    gatewaytimeout:
      type: object
      properties:
        message:
          type: string
          example: Request Timeout
        status:
          type: string
          example: Failure
    inputfieldmissing:
      type: object
      properties:
        message:
          type: string
          example: Input Field Missing
        status:
          type: string
          example: Failure
    inputlimitexceeded:
      type: object
      properties:
        message:
          type: string
          example: Input Limit Exceeded
        status:
          type: string
          example: Failure
    versions:
      type: object
      properties:
        v1.1.0:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - Jun 30,2022
              x-details: Optimized release
              description: Latest Version
        v1.0.0:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - May 21,2021
              x-details: Optimized release
              description: Older Version
        v0.1.0:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - May 15,2020
              x-details: Initial version release
              description: Archived
  securitySchemes:
    APIAuthorizer:
      type: apiKey
      name: x-api-key
      in: header
      x-amazon-apigateway-authtype: custom
      description: Authentication is done using the x-api-key in the request header.
