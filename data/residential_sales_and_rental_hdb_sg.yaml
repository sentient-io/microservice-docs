openapi: 3.0.1
info:
  title: HDB Residential Occupancy Status (SG)
  x-subscribelink: residential_sales_and_rental_hdb_sg
  description: |+
   This Data microservice retreives comprehensive details of each Housing Development Board (HDB) block in Singapore including the number of units for each type of flats and whether they were sold or leased. Queries based on keywords and proximity to particular locations can be performed. Updated weekly.</br>
   The HDB POTH programme makes selected public and non-public datasets available to developers and companies to improve their service offerings to benefit the lives of Singapore citizens. Sentient.io is proud to partner with HDB to manage and facilitate the sharing of data for the POTH Programme.</br></br>
   
   **Note:** As this microservice uses the GET method, developers using this microservice must remember to have their app encode all the input values to be URL friendly (i.e. all spaces and special characters must be replaced). Here’s a reference on [URL encoding](https://www.w3schools.com/tags/ref_urlencode.ASP).
       
  x-additionalinfo : |+
    Suggested Use Cases:
    - Information can be used to build a community app that benefits from geo-targeting family types and income groups by areas for non-profit charity/social organizations, real estate developers, property agencies, retail shops, marketing for educational sector, government agencies.
    
    **Refining queries in the filterdata field using filter types and match types**
    
    The filterdata fields use elasticsearch’s syntax (specifically filter types and match types) to help further refine search results and provide greater flexibility in structuring more sophisticated queries.</br></br>
  
    **Filter Types:**
    
    A filter type is a logic operator to which the search results must fulfill certain logical conditions to be returned. The supported match types are&#58;
    
    * **must** - All of the stated conditions must match. Equivalent to an AND operator.
    
      > {"must":[{"match_phrase":{"street":"serangoon north avenue 4"}}]}
    
    * **must_not** - All of the stated conditions must not match. Equivalent to a NOT operator.
      > {"must_not":[{"match":{"postalcode":570251}}]}
    
    * **should** - At least one of the stated conditions should match. Equivalent to an OR operator. 
      > {"should":[{"match_phrase":{"street":"serangoon north avenue 4"}}]}
    
    * **filter** - All of the stated conditions that must match. However, results are not scored unlike the other filter types which returns results based on how well the conditions are met.
      > {"filter":[{"range":{"year_completed":{"gte":1}}}]}
      
    For a more detailed guide on filter types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-dsl-bool-query.html).
    
    Filter types cannot be used alone and must be used in conjunction with a match type to complete the query.</br></br>
    
    **Match Types:**
    
    A match type is a match operator nested within a filter type that fine-tunes the matching condition of the text search. The supported match types are&#58;
    
    * **match** - Search within a full text field for a single word
      > {"match":{"street":"serangoon"}}
    * **match_phrase** - Search within a full text field
      > {"match_phrase":{"street":"serangoon central"}}
    * **match_phrase_prefix** - Search within a full text field with prefix
      > {"match_phrase_prefix":{"street":"serangoon central"}}
    * **term** - Returns results that contain an exact term in a provided field
      > {"term":{"postalcode":650634}}
    * **terms** - Returns results that contain one or more exact terms in a provided field
      > {"terms":{"postalcode":[650634,650633]}}
    * **range** - Returns results that contain terms within a stipulated range
      > {"range":{"4room_sold":{"gte":50}}}
      > {"range":{"4room_sold":{"lte":50}}}
      > {"range":{"4room_sold":{"gte":50,"lte":70}}}
    * **exists** - Returns results that contain any indexed value for a field
      > {"exists":{ "field": "postalcode"}}
      
      For a more detailed guide to match types, [refer to this](https://www.elastic.co/guide/en/elasticsearch/reference/7.9/term-level-queries.html).
    
    **Forming sophisticated queries using combinations of filter types (in JSON)**
    
    Multiple filter types can be combined together in one query (written in JSON format) to form a very sophisticated query. Here’s one example below&#58;
    
     > {
     >  "must":[{"match_phrase":{"street":"serangoon+central"}}],
     >  "filter":[{"range":{"year_completed":{"gte":1}}}],
     >  "should":[{"match":{"postalcode":650633}}],
     >  "must_not":[{"match":{"postalcode":650634}}]
     > }
     
     
    **Sample Queries Based on Use Cases**
       
    1. **Search for all the four room units sold at Bishan Street 24.**
    
       Using a filterdata only&#58;
       
       > filterdata = {"filter":[{"match_phrase": {"street":"bishan street 24"}},{"range": {"4room_sold":{"gte":1}}}]}
       
  version: '1.0.1'
  x-apitype: small file
  x-apitypedescription: |+
    Fast | Single-Call | 10MB/Call
  x-inputfilelimit: |+
    Process up to 10000 kb of data or chat per API call.
  x-responsetime: |+
    Response rate is fast due to small data transfer per call made.
  x-billingmethod: |+
    The API is billed by per request.
  x-notes: |+
    Process up to 10,000 records.
  x-apidetailsdesc: |+
    Provides comprehensive details of each Housing Development Board.
servers:
  - url: 'https://apis.sentient.io'
tags:
- name: "v1.0.1"
  description: "Published Date - Jul 13, 2022"
paths:
   /microservices/data/buildinginfo/v1/getdata:
    get:
      tags:
        - v1.0.1
      parameters:
        - in: query
          name: querystring
          schema:
            type: string
          description: |+ 
            Simple keyword search for matches in all searchable fields. Keywords separated by spaces will return results containing any of those keywords. For exact phrase match, put entire phrase in double quotes (" ").
            
            If this field is set to null, by default the microservice will return all buildings (within the stated limit), which can be further refined through the filterdata field for more sophisticated queries.
            
          example: "serangoon"
          default: false
        - in: query
          name: offset
          schema:
            type: integer
          description: The offset of the record list ie the starting index
          example: "0"
          default: false
        - in: query
          name: limit
          schema:
            type: integer
          description: The max records to return for the request. Default - 10, Max - 10000
          example: "10"
          default: false
        - in: query
          name: filterdata
          schema:
            type: string
          description: |+
            Refine the search further on any of the possible through the 4 filter types &#58;
            * must
            * must_not
            * should
            * filter
          default: false
          example: |+
            {"must":[{"match_phrase":{"street":"serangoon+central"}}],"filter":[{"range":{"year_completed":{"gte":1}}}],"should":[{"match":{"postalcode":650633}}],"must_not":[{"match":{"postalcode":650634}}]}
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
              example:
                results:
                  total: 12150
                  max_score: 1
                  hits:
                  - _index: sentient_hdb_buildinginfo_index
                    _type: dir_doc
                    _id: '750405'
                    _score: 1
                    _source:
                      postalcode: 750405
                      year_completed: 1999
                      total_dwelling_units: 112
                      1room_sold: 0
                      2room_sold: 0
                      3room_sold: 0
                      4room_sold: 112
                      5room_sold: 0
                      exec_sold: 0
                      multigen_sold: 0
                      studio_apartment_sold: 0
                      1room_rental: 0
                      2room_rental: 0
                      3room_rental: 0
                      other_room_rental: 0
                      block: 405
                      street: ADMIRALTY LINK
                      xcoord: 26086.0996
                      ycoord: 48325.8008
                      address: 405 ADMIRALTY LINK
                      createddate: '2019-10-17'
                      lastupdated: '2019-10-17'
                      location:
                        lat: 1.37179535
                        lon: 103.8469821
                      source: hdb
                message: Successfully Processed
                status: Success                              
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentrequired'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notfound'
        '419':
          description: Input Field Missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputfieldmissing'
        '413':
          description: Payload Too Large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inputlimitexceeded'    
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidinput'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servererror'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gatewaytimeout'
      security:
        - APIAuthorizer: []
components:
  schemas:
    success:
      type: object
      properties:
        results:
          type: object
          example: {<Json Object>}
          description: Json Object of returned results 
          properties:
            total:
              type: integer
              example: 12150
              description: Total number of records
            max_score:
              type: integer
              example: 1
              description: The highest score value
            hits:
              type: array
              example: [{<JSON result Object}]
              description: The list of Json result object
              items:
                type: object
                properties:
                  _index: 
                    type: string
                    description: Index of the document
                    example: "sentient_buildinginfo_hdb_index"
                  _type:
                    type: string
                    description: Content type of the document
                    example: dir_doc
                  _id:  
                    type: integer
                    format: int32
                    description: Document ID
                    example: '750405'
                  _score: 
                    type: integer
                    format: int32
                    description: The document score for the search request
                    example: 1
                  _source:
                    type: object
                    example: {<Json Object>}
                    description: Json Object of returned hits                      
                    properties:
                      postalcode:
                        type: integer
                        format: int32
                        description: Postal code
                        example: 750405
                      year_completed:
                        type: integer
                        format: int32
                        description: Completed year of the Building
                        example: 1999
                      total_dwelling_units:
                        type: integer
                        format: int32
                        description: Total Dwelling units
                        example: 112
                      1room_sold: 
                        type: integer
                        format: int32
                        description: No. of one room units sold
                        example: 0
                      2room_sold: 
                        type: integer
                        format: int32
                        description: No. of two room units sold
                        example: 0
                      3room_sold:
                        type: integer
                        format: int32
                        description: No. of three room units sold
                        example: 0
                      4room_sold: 
                        type: integer
                        format: int32
                        description: No. of four room units sold
                        example: 112
                      5room_sold: 
                        type: integer
                        format: int32
                        description: No. of five room units sold
                        example: 0
                      exec_sold: 
                        type: integer
                        format: int32
                        description: No. of executive units sold
                        example: 0
                      multigen_sold: 
                        type: integer
                        format: int32
                        description: No. of multi generation units sold
                        example: 0
                      studio_apartment_sold: 
                        type: integer
                        format: int32
                        description: No. of studio units sold
                        example: 0
                      1room_rental:
                        type: integer
                        format: int32
                        description: No. of one room units rented
                        example: 0
                      2room_rental: 
                        type: integer
                        format: int32
                        description: No. of two room units rented
                        example: 0
                      3room_rental: 
                        type: integer
                        format: int32
                        description: No. of three room units rented
                        example: 0
                      other_room_rental: 
                        type: integer
                        format: int32
                        description: No. of other units rented
                        example: 0
                      block:
                        type: integer
                        format: int32
                        description: Block Number
                        example: 405
                      street: 
                        type: string
                        description: Street
                        example: ADMIRALTY LINK
                      xcoord: 
                        type: number
                        format: float
                        description: SVY21 X coordinates (Note, SVY21 is a localised plane coordinate system used specifically by Singapore. For global GPS lat/long coordinates, refer to "location" object)
                        example: 26086.0996
                      ycoord: 
                        type: number
                        format: float
                        description: SVY21 Y coordinates (Note, SVY21 is a localised plane coordinate system used specifically by Singapore. For global GPS lat/long coordinates, refer to "location" object)
                        example: 48325.8008
                      address: 
                        type: string
                        description: Full address
                        example: 405 ADMIRALTY LINK
                      createddate: 
                        type: string
                        description: Record first release date on sentient
                        example: '2019-10-17'
                      lastupdated: 
                        type: string
                        description: Record last updated date on sentient
                        example: '2019-10-17'
                      location:
                        type: object
                        description: WGS84 coordinates lat/long
                        example: {"lat":1.350748,"lon":103.872798}                      
                        properties:
                            lat: 
                              type: number
                              format: float
                              description: Latitude in the WGS84 coordinate format
                              example: 1.37179535
                            lon:
                              type: number
                              format: float
                              description: Longitude in the WGS84 coordinate format
                              example: 103.8469821
                      source: 
                        type: string
                        description: Dataset source
                        example: hdb
        message:
          type: string
          example: Successfully Processed
          description: Description of the API status
        status:
          type: string
          example: Success
          description: The status of the API call - Success/Failure
    unauthorized:
      type: object
      properties:
        message:
          type: string
          example: Missing Authentication Token
        status:
          type: string
          example: Failure
    forbidden:
      type: object
      properties:
        message:
          type: string
          example: Access Denied Unauthorized User
        status:
          type: string
          example: Failure
    paymentrequired:
      type: object
      properties:
        message:
          type: string
          example: Insufficient Credits Kindly Top Up
        status:
          type: string
          example: Failure
    notfound:
      type: object
      properties:
        message:
          type: string
          example: Invalid Request URL
        status:
          type: string
          example: Failure
    servererror:
      type: object
      properties:
        message:
          type: string
          example: Internal Server Error
        status:
          type: string
          example: Failure
    invalidinput:
      type: object
      properties:
        message:
          type: string
          example: Invalid Input
        status:
          type: string
          example: Failure
    gatewaytimeout:
      type: object
      properties:
        message:
          type: string
          example: Request Timeout
        status:
          type: string
          example: Failure
    inputfieldmissing:
      type: object
      properties:
        message:
          type: string
          example: Input Field Missing
        status:
          type: string
          example: Failure
    inputlimitexceeded:
      type: object
      properties:
        message:
          type: string
          example: Input Limit Exceeded
        status:
          type: string
          example: Failure      
    versions:
      type: object
      properties:
        v1.0.1:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - Jul 13,2022
              x-details: Optimized release
              description: Latest Version
        v1.0.0:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - May 21,2021
              x-details: Optimized release
              description: Older Version
        v0.1.0:
         type: array
         items:
          oneOf:
            - type: string
              example: Published Date - Nov 25,2019
              x-details: Initial version release           
              description: Archived
  securitySchemes:
    APIAuthorizer:
      type: apiKey
      name: x-api-key
      in: header
      x-amazon-apigateway-authtype: custom
      description: Authentication is done using the x-api-key in the request header.
